@page "/produkter"

@using TeamKville.Shared;
@using TeamKville.Shared.Dto;
@inject IJSRuntime JsRuntime;

<h1 class="text-center p-2">Produkter</h1>

<!--FILTERKNAPP/SÖKFÄLT-->
<div class="container d-flex pb-4 pt-4 px-4">
    <button class="btn btn-primary fa fa-filter" @onclick="FilterTab"> Filtrera</button>
    <input class="mx-2 rounded-1" type="text" placeholder="Sök..." @oninput="UpdateSearchBox" @onkeydown="SearchOnKeyDown"/>
    <button class="fa fa-search border-0" style="background-color: transparent;" @onclick="Search"></button>
</div>
<style>

    #filter-tab {
        z-index: 1;
        position: fixed;
        top: 0;
        left: -300px;
        width: 300px;
        height: 100%;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0,0,0,0.3);
        transition: left 0.3s ease-in-out;
    }

    #filter-tab.open {
        left: 0;
    }

</style>

<!--FILTRERINGSMENYN-->
<div id="filter-tab">
    <div class="container shadow-sm text-end">
      <button class="fa fa-close border-0" style="background-color: transparent;" @onclick="FilterTab"></button>
      <h2 class="text-center pb-4">Filter</h2>
  </div>
  <div class="container text-start p-2">
      <label for="category">Kategori: </label>
      <select class="align-self-center w-100" name="category" id="category" @bind="categoryFilter">
           <!--Automatisera senare när API är klart-->
          <option value="game">Spel</option>
          <option value="peripherals">Speltillbehör</option>
          <option value="miscallaneous">Övrigt</option>
      </select>
  </div>

  @if(categoryFilter == "game")
  {
    <div class="container text-start p-2" id="genre">
        <label for="genre">Genre: </label>
        <select class="align-self-center w-100" name="genre" id="genre" @bind="genreFilter">
            <!--Automatisera senare när API är klart-->
            <option value=""></option>
            <option value="action">Action</option>
            <option value="adventure">Äventyr</option>
            <option value="rpg">Rollspel</option>
        </select>
    </div>

    <!--GÖR OM TILL DUAL SLIDER OM DU HAR TID ÖVER!!-->
    <div class="container text-start position-relative p-2" id="age">
        <div class="form-check form-switch">
            <input class="form-check-input"type="checkbox" @bind-value="ageFilterEnabled"/>
            <label for="age">Ålder: </label>
        </div>
        <div class="container align-items-center ">
            <input type="range" min="3" max="15" step="1" class="slider w-100" @bind-value="@AgeSliderValue1" />
            <input type="range" min="9" max="18" step="1" class="slider w-100" @bind-value="@AgeSliderValue2" />
            <p class="text-center">Från @AgeSliderValue1 - @AgeSliderValue2 år.</p>
        </div>

    </div>
  }

<!--GÖR OM TILL DUAL SLIDER OM DU HAR TID ÖVER!!-->
 <div class="container text-start position-relative p-2">
     <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" @bind-value="priceFilterEnabled" />
             <label for="price">Prisklass: </label>
     </div>
    
   
    <div class="container align-items-center">
        <input type="range" min="0" max="1000" step="1" class="slider w-100" @bind-value="@PriceSliderValue1" />
        <input type="range" min="500" max="1000"  step="1" class="slider w-100" @bind-value="@PriceSliderValue2"/>
        <p class="text-center">@PriceSliderValue1 - @PriceSliderValue2 kr</p>
    </div>
    
 </div>

  <div class="container d-flex justify-content-center">
      <button class="btn btn-primary m-1" @onclick="Filter">Filtrera</button>
       <button class="btn btn-secondary m-1" @onclick="ResetFilter">Rensa filter</button>
  </div>
</div>

<!--PRODUKTKATALOGEN-->
@if(products.Count == 0)
{
    <h3 class="text-center">Inga resultat. Prova med andra filter och söktermer.</h3>
}
else
{
  <div class="container align-content-center">
  <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 justify-content-center align-items-center mx-auto">
    @for (int i = 0; i < 9; i++)
    {
      <div class="col mb-1">
        @if (i < currentProducts.Count)
        {
          var product = currentProducts[i];
          <!--Ändra baserat på hur vi ska navigera till produkten-->
          <a href="/product/@product.ProductId" style="text-decoration: none; color: black;">
          <div class="card m-0 shadow-sm">
            <img src="@SharedClass.GetImage("product", product.ProductId)" class="card-img-top pt-2 pb-2" style="height: 200px; object-fit: contain;">
            <div class="card-body border-top">
              <h5 class="card-title">@product.Name</h5>
              <div class="stars">
                @for (int r = 1; r <= 5; r++)
                {
                    if (r <= product.Rating)
                    {
                        <i class="fa fa-star" style="color: #ffa500;"></i>
                    }
                    else
                    {
                        <i class="fa fa-star" style="color: #6c757d;"></i>
                    }
                }
              </div>
              <p class="card-text">Pris: @product.Price kr</p>
              <!--Lägg in funktion för att lägga till i varukorgen!-->
              <a class="btn btn-primary">Köp</a>
            </div>
          </div>
         </a>
        }
      </div>
    }
  </div>
</div> 
}


<!--SIDONAVIGERING-->
<div class="container d-flex justify-content-center text-center">

    <button class="fa fa-chevron-left border-0 prev-btn" style="background-color: transparent;"@onclick="() => PageNavigation(-1)"></button>
    <p class="p-1 mt-3">@index / @Math.Ceiling(maxPages) </p>
    <button class="fa fa-chevron-right border-0 next-btn" style="background-color: transparent;" @onclick="() => PageNavigation(1)"></button>

    @if(index != 1)
    {
        <style>
        .prev-btn {
           visibility: visible;
        }
        </style>
    }
    else
    {
        <style>
        .prev-btn{
            visibility: hidden;
        }
        </style>
    }

    @if(index != maxPages)
    {
        <style>
        .next-btn {
           visibility: visible;
        }
        </style>
    }
    else
    {
        <style>
            .next-btn {
                visibility: hidden;
            }
        </style>
    }

</div>

@code {
    //Produktkatalogens variabler
    List<ProductDto> allProducts = new List<ProductDto>();
    List<ProductDto> products = new List<ProductDto>();
    List<ProductDto> currentProducts = new List<ProductDto>();
    int maxProductsPerPage = 9;
    int index = 1;
    decimal maxPages;


    //Filtreringens variabler
    bool isFilterOpen = false;
    string? nameFilter = null;
    string? categoryFilter = "game"; //Ändra sen beroende på hur category fungerar
    string? genreFilter = "";

    bool ageFilterEnabled = false;
    bool priceFilterEnabled = false;

    private int ageSliderStartValue1 = 9;
    private int ageSliderStartValue2 = 13;

    public int AgeSliderValue1
    {
        get => ageSliderStartValue1;
        set
        {
            ageSliderStartValue1 = value;
            if (ageSliderStartValue1 > ageSliderStartValue2) ageSliderStartValue2 = ageSliderStartValue1;
        }
    }

    public int AgeSliderValue2
    {
        get => ageSliderStartValue2;
        set
        {
            ageSliderStartValue2 = value;
            if (ageSliderStartValue2 < ageSliderStartValue1) ageSliderStartValue1 = ageSliderStartValue2;
        }
    }

    private int priceSliderStartValue1 = 0;
    private int priceSliderStartValue2 = 500;

    public int PriceSliderValue1
    {
        get => priceSliderStartValue1;
        set
        {
            priceSliderStartValue1 = value;
            if (priceSliderStartValue1 > priceSliderStartValue2) priceSliderStartValue2 = priceSliderStartValue1;
        }
    }

    public int PriceSliderValue2
    {
        get => priceSliderStartValue2;
        set
        {
            priceSliderStartValue2 = value;
            if (priceSliderStartValue2 < priceSliderStartValue1) priceSliderStartValue1 = priceSliderStartValue2;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        //Fake produktlista för testing
        var rand = new Random();
        for(int i = 0; i < 25;  i++)
        {
            allProducts.Add(new ProductDto { ProductId = i, Name = "Spel" + i, Category = "game", Genre = "action", Age = 18, Price = 599, Rating = rand.Next(1, 5) });
        }

        for(int i = 25; i < 50;  i++)
        {
            allProducts.Add(new ProductDto { ProductId = 4, Name = "Kontroller" + i, Category = "peripherals", Price = 799, Rating = rand.Next(1, 5) });
        }

        products = allProducts;

        DisplayProducts();

    }

    //Produktkatalogsfunktioner
    void DisplayProducts()
    {
        currentProducts.Clear();
        maxPages = (products.Count() / maxProductsPerPage) + 1;
        int productIndex = index * maxProductsPerPage;
        int prevProductIndex = (index - 1) * maxProductsPerPage;

        try
        {
            for (int i = prevProductIndex; i < productIndex; i++)
            {
                currentProducts.Add(products[i]);
            }

        }
        catch
        {

        }
    }

    async void PageNavigation(int page)
    {
        index = index + page;
        DisplayProducts();
    }


    //Filter funktioner
    async void FilterTab()
    {
        if(isFilterOpen == false)
        {
            await JsRuntime.InvokeVoidAsync("openContainer");
            isFilterOpen = true;
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("closeContainer");
            isFilterOpen = false;
        }

    }

    void UpdateSearchBox(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        nameFilter = e.Value.ToString();
    }

    void SearchOnKeyDown(KeyboardEventArgs e)
    {
        if(e != null && e.Key == "Enter")
        {
            Search();
        }

    }

    void Search()
    {
        index = 1;
        products = allProducts.Where(product => product.Name.ToLower().Contains(nameFilter.ToLower())).ToList();
        DisplayProducts();
    }

    void Filter()
    {
        products = allProducts.Where(product => product.Category == categoryFilter).ToList();

        if(ageFilterEnabled)
        {
            products = products.Where(product => product.Age >= AgeSliderValue1).Where(product => product.Age <= AgeSliderValue2).ToList();
        }

        if(priceFilterEnabled)
        {
            products = products.Where(product => product.Price >= PriceSliderValue1).Where(product => product.Price <= PriceSliderValue2).ToList();
        }

        if(genreFilter != "")
        {
            products = products.Where(product => product.Genre == genreFilter).ToList();
        }

        DisplayProducts();
    }

    void ResetFilter()
    {
        products = allProducts;
        DisplayProducts();
    }


}
