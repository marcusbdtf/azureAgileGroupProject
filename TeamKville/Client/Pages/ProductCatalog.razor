@page "/produkter"

@using TeamKville.Shared;
@using TeamKville.Shared.Dto;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Inputs;
@inject IJSRuntime JsRuntime;


<div class="container shadow">
<h1 class="text-center p-2 pt-4">Produkter</h1>

<!--FILTERKNAPP/SÖKFÄLT-->
<div class="container d-flex pb-4 pt-4 px-4">
    <button class="btn btn-primary fa fa-filter" @onclick="FilterTab"> Filtrera</button>
    <input class="mx-2 rounded-1" type="text" placeholder="Sök..." @oninput="UpdateSearchBox" @onkeydown="SearchOnKeyDown"/>
    <button class="fa fa-search border-0" style="background-color: transparent;" @onclick="Search"></button>
</div>


<!--FILTRERINGSMENYN-->
<div id="filter-tab">
    <div class="container text-end">
    <button class="fa fa-close border-0" style="background-color: transparent;" @onclick="FilterTab"></button>
    <h2 class="text-center pb-4">Filter</h2>
</div>

   <!--KATEGORIFILTER-->
    <div class="container px-0 py-0 pb-5">
       <div class="accordion" id="filterAccordion">
          <div class="accordion-item">
          <div class="container text-start p-2">
              <h2 class="accordion-header" id="categoryHeading">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#categoryCollapse" @onclick="ToggleCategoryFilter" aria-expanded="false" aria-controls="categoryCollapse">
                    Kategori
                  </button>
              </h2>
              <div id="categoryCollapse" class="accordion-collapse collapse" aria-labelledby="categoryHeading">
                  <div class="accordion-body">
                      <div class="align-self-center w-100">

                            @foreach (var category in availableCatagories)
                            {
                                if (category != null)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" value="@category" name="category" id="flexRadioDefault" @onchange="() => SelectedCategory(category)"/>
                                        <label class="form-check-label" for="flexRadioDefault">
                                            @SharedClass.CapitalizeFirstLetter(category) (@allProducts.Where(p => p.Category == category).ToList().Count())
                                        </label>
                                    </div>                    
                                }
                            }        
                      </div>
                  </div>
              </div>
          </div>
          </div>

       @if (selectedCategory == "game")
       {
            <!--GENREFILTER-->
            <div class="accordion-item">
            <div class="container text-start p-2" id="genre">
                <h2 class="accordion-header" id="genreHeading"> 
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#genreCollapse" @onclick="ToggleGenreFilter" aria-expanded="false" aria-controls="genreCollapse">
                        Genre
                    </button>
                </h2>
                <div id="genreCollapse" class="accordion-collapse collapse" aria-labelledby="genreHeading">
                    <div class="accordion-body">
                        <div class="align-self-center w-100">

                            @foreach (var genre in availableGenres)
                            {
                                if (genre != null)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="@genre" id="flexCheckDefault" @onclick="@(e => AddSelectedGenres(genre))" />
                                        <label class="form-check-label" for="flexCheckDefault">
                                            @SharedClass.CapitalizeFirstLetter(genre)  (@allProducts.Where(p => p.Genre == genre).ToList().Count())
                                        </label>
                                    </div>
                                }

                            }

                        </div>
                    </div>
                </div>
            </div>
            <!--ÅLDERFILTER-->
            </div>
            <div class="accordion-item">
                <div class="container text-start position-relative p-2" id="age">
                    <h2 class="accordion-header" id="ageHeading">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#ageCollapse" @onclick="ToggleAgeFilter" aria-expanded="false" aria-controls="ageCollapse">
                            Ålder
                        </button>
                    </h2>
                    <div id="ageCollapse" class="accordion-collapse collapse" aria-labelledby="ageHeading">
                    <div class="accordion-body">

                        <div class="container w-100 my-1 text-center">
                        <SfSlider Min="3" Max="18" @bind-Value="ageSliderValue" Type="SliderType.Range">
                            <SliderTooltip IsVisible="true"></SliderTooltip>
                            <SliderLimits Enabled="true" MinStart="3" MinEnd="18" MaxEnd="18" MaxStart="3"></SliderLimits>
                        </SfSlider>
                            <p class="text-center">Från @ageSliderValue[0] - @ageSliderValue[1] år.</p>
                        </div>

                    </div>
                </div>
                </div>
            </div>


       }
        <!--PRISFILTER-->
        <div class="accordion-item">
            <div class="container text-start position-relative p-2">
            <h2 class="accordion-header" id="priceHeading">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#priceCollapse" @onclick="TogglePriceFilter" aria-expanded="false" aria-controls="priceCollapse">
                    Pris
                </button>
            </h2>
                <div id="priceCollapse" class="accordion-collapse collapse" aria-labelledby="priceHeading">
                    <div class="accordion-body">    
                        <div class="container align-items-center">
                            <SfSlider Min="0" Max="maxPrice" @bind-Value="priceSliderValue" Type="SliderType.Range">
                                <SliderTooltip IsVisible="true"></SliderTooltip>
                                <SliderLimits Enabled="true" MinStart="0" MinEnd="0" MaxEnd="maxPrice" MaxStart="0"></SliderLimits>
                            </SfSlider>
                            <p class="text-center">@priceSliderValue[0] - @priceSliderValue[1] kr</p>
                        </div>
                    </div>
                </div>           
            </div>
        </div>
    </div>
</div>

  <!--FILTERKNAPP-->
    <div class="container d-flex justify-content-center">
        <button class="btn btn-primary m-1" @onclick="Filter">Filtrera</button>
        <button class="btn btn-secondary m-1" @onclick="ResetFilter">Rensa filter</button>
    </div>

</div>


<!--PRODUKTKATALOGEN-->
    @if (products.Count == 0)
    {
        <h3 class="text-center">Inga resultat. Prova med andra filter och söktermer.</h3>
    }
    else
{
        <div class="container align-content-center">
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 justify-content-center align-items-center mx-auto">
                @for (int i = 0; i < 9; i++)
                {
                    <div class="col mb-1">
                        @if (i < currentProducts.Count)
                        {
                            var product = currentProducts[i];

                            <div class="card m-0 shadow-sm">
                            <a href="/product/@product.Id" style="text-decoration: none; color: black;">
                            <img src="@SharedClass.GetImage("product", product.Id)" class="card-img-top pt-2 pb-2" style="height: 200px; object-fit: contain;">
                            </a>
                            <div class="card-body border-top">
                                <h5 class="card-title">@product.Name</h5>
                                <div class="stars">
                                    @for (int r = 1; r <= 5; r++)
                                    {
                                        if (r <= product.Rating)
                                        {
                                        <i class="fa fa-star" style="color: #ffa500;"></i>
                                        }
                                        else
                                        {
                                        <i class="fa fa-star" style="color: #6c757d;"></i>
                                        }
                                    }
                                </div>
                                <p class="card-text">Pris: @product.Price kr</p>

                                <!--Lägg in funktion för att lägga till i varukorgen!-->
                                <button class="btn btn-primary">Köp</button>
                            </div>
                            </div>

                        }
                    </div>
                }
            </div>
        </div> 
    }


<!--SIDONAVIGERING-->
<div class="container d-flex justify-content-center text-center">

    <button class="fa fa-chevron-left border-0 prev-btn" style="background-color: transparent;"@onclick="() => PageNavigation(-1)"></button>
    <p class="p-1 mt-3">@index / @Math.Ceiling(maxPages) </p>
    <button class="fa fa-chevron-right border-0 next-btn" style="background-color: transparent;" @onclick="() => PageNavigation(1)"></button>

        @if (index != 1)
        {
            <style>
            .prev-btn {
               visibility: visible;
            }
            </style>
        }
        else
        {
            <style>
            .prev-btn{
                visibility: hidden;
            }
            </style>
        }

        @if (index != maxPages)
        {
            <style>
            .next-btn {
               visibility: visible;
            }
            </style>
        }
        else
        {
            <style>
                .next-btn {
                    visibility: hidden;
                }
            </style>
        }

</div>
</div>

@code {
    //Produktkatalogens variabler
    List<ProductDto> allProducts = new List<ProductDto>();
    List<ProductDto> products = new List<ProductDto>();
    List<ProductDto> currentProducts = new List<ProductDto>();
    int maxProductsPerPage = 9;
    int index = 1;
    decimal maxPages;


    //Filtreringens variabler
    bool isFilterOpen = false;
    string? nameFilter = null;
    string? selectedCategory;
    List<string> selectedGenres = new List<string>();

    bool categoryFilterEnabled = false;
    bool genreFilterEnabled = false;
    bool ageFilterEnabled = false;
    bool priceFilterEnabled = false;

    int maxPrice;
    List<string> availableGenres = new List<string>();
    List<string> availableCatagories = new List<string>();
    int[] ageSliderValue = { 3, 18 };
    int[] priceSliderValue = { 0, 0 };



    protected override async Task OnInitializedAsync()
    {
        //Fake produktlista för testing

        allProducts = SharedClass.allProducts;
        products = allProducts;

        CalculateHighestPrice();
        GetCategories();
        GetGenres();
        DisplayProducts();

    }

    //Produktkatalogsfunktioner
    void DisplayProducts()
    {
        currentProducts.Clear();
        maxPages = (products.Count() / maxProductsPerPage) + 1;
        int productIndex = index * maxProductsPerPage;
        int prevProductIndex = (index - 1) * maxProductsPerPage;

        try
        {
            for (int i = prevProductIndex; i < productIndex; i++)
            {
                currentProducts.Add(products[i]);
            }

        }
        catch
        {

        }
    }

    async void PageNavigation(int page)
    {
        index = index + page;
        DisplayProducts();
    }


    //Filter funktioner
    async void FilterTab()
    {
        if (isFilterOpen == false)
        {
            await JsRuntime.InvokeVoidAsync("openContainer");
            isFilterOpen = true;
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("closeContainer");
            isFilterOpen = false;
        }

    }

    void UpdateSearchBox(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        nameFilter = e.Value.ToString();
    }

    void SearchOnKeyDown(KeyboardEventArgs e)
    {
        if (e != null && e.Key == "Enter")
        {
            Search();
        }

    }

    void Search()
    {
        index = 1;
        products = allProducts.Where(product => product.Name.ToLower().Contains(nameFilter.ToLower())).ToList();
        DisplayProducts();
    }

    void CalculateHighestPrice()
    {
        ProductDto highestPricedProduct = allProducts.OrderByDescending(p => p.Price).First();
        maxPrice = Convert.ToInt32(highestPricedProduct.Price);
        priceSliderValue[1] = maxPrice;
    }


    void GetCategories()
    {
        var pCategories = allProducts.OrderBy(p => p.Category).GroupBy(p => p.Category).Select(p => p.First()).ToList();
        foreach (var p in pCategories)
        {
            availableCatagories.Add(p.Category);
        }
    }

    void GetGenres()
    {
        var pGenres = allProducts.OrderBy(p => p.Genre).GroupBy(p => p.Genre).Select(p => p.First()).ToList();
        foreach (var p in pGenres)
        {
            availableGenres.Add(p.Genre);
        }
    }

    void ToggleCategoryFilter()
    {
        categoryFilterEnabled = !categoryFilterEnabled;
    }

    void ToggleGenreFilter()
    {
        genreFilterEnabled = !genreFilterEnabled;
    }

    void ToggleAgeFilter()
    {
        ageFilterEnabled = !ageFilterEnabled;
    }

    void TogglePriceFilter()
    {
        priceFilterEnabled = !priceFilterEnabled;
    }

    private void SelectedCategory(string category)
    {
        selectedCategory = category;
    }

    private void AddSelectedGenres(string genre)
    {
        if (selectedGenres.Contains(genre))
        {
            selectedGenres.Remove(genre);
        }
        else
        {
            selectedGenres.Add(genre);
        }
    }

    void Filter()
    {
        ResetFilter();

        if (categoryFilterEnabled && selectedCategory != null)
        {
            products = allProducts.Where(product => product.Category == selectedCategory).ToList();
        }

        if (ageFilterEnabled)
        {
            products = products.Where(product => product.Age >= ageSliderValue[0]).Where(product => product.Age <= ageSliderValue[1]).ToList();
        }

        if (priceFilterEnabled)
        {
            products = products.Where(product => product.Price >= priceSliderValue[0]).Where(product => product.Price <= priceSliderValue[1]).ToList();
        }

        if (genreFilterEnabled)
        {
            products = allProducts.Where(product => selectedGenres.Contains(product.Genre)).ToList();
        }

        DisplayProducts();
    }

    void ResetFilter()
    {
        products = allProducts;
        DisplayProducts();
    }


}

<style>

    #filter-tab {
        z-index: 1;
        position: fixed;
        top: 0;
        left: -300px;
        width: 300px;
        height: 100%;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0,0,0,0.3);
        transition: left 0.3s ease-in-out;
    }

        #filter-tab.open {
            left: 0;
        }

    .accordion-item, .accordion-button {
        border-radius: 0 !important;
    }

</style>


