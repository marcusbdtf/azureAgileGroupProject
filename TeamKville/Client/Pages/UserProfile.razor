@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TeamKville.Shared;
@using TeamKville.Shared.Models;
@using TeamKville.Shared.Dto;
@using Microsoft.Graph
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject HttpClient HttpClient
@attribute [Authorize]

<div class="container">
    <div class="row align-items-start">
        <div class="col-12 col-md-8 col-lg-6 mx-auto profile-form">
        <h3>Användar Profil</h3>

@if (dbUser == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <button class="btn btn-link" @onclick="BeginLogout">Log out</button>

            @if(dbUser.IsAdmin)
            {
                <button class="btn btn-link" @onclick="AdminNavigation">Admin Panel</button>
            }

            <EditForm Model="@dbUser" OnValidSubmit="@HandleFormSubmit" @ref="editForm">
                <ChildContent Context="editContext">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="FirstName" class="form-label">Namn:</label>
                        <input type="text" id="FirstName" @bind="dbUser.FirstName" class="form-control" placeholder="@dbUser.FirstName" />
                    </div>
                    <div class="mb-3">
                        <label for="LastName" class="form-label">Efternamn:</label>
                        <input type="text" id="LastName" @bind="dbUser.LastName" class="form-control" placeholder="@dbUser.LastName" />
                    </div>
                    <div class="mb-3">
                        <label for="Email" class="form-label">Email:</label>
                        <input type="email" id="Email" @bind="dbUser.Email" class="form-control" placeholder="@dbUser.Email" />
                    </div>
                    <div class="mb-3">
                        <label for="PhoneNumber" class="form-label">Telefon:</label>
                        <input type="text" id="PhoneNumber" @bind="dbUser.PhoneNumber" class="form-control" placeholder="@dbUser.PhoneNumber" />
                    </div>
                    <div class="mb-3">
                        <label for="City" class="form-label">Stad:</label>
                        <input type="text" id="City" @bind="dbUser.Address.City" class="form-control" placeholder="@dbUser.Address.City" />
                    </div>
                    <div class="mb-3">
                        <label for="Street" class="form-label">Gata:</label>
                        <input type="text" id="Street" @bind="dbUser.Address.Street" class="form-control" placeholder="@dbUser.Address.Street" />
                    </div>
                    <div class="mb-3">
                        <label for="PostNumber" class="form-label">Postnummer:</label>
                        <input type="text" id="PostNumber" @bind="dbUser.Address.PostNumber" class="form-control" placeholder="@dbUser.Address.PostNumber" />
                    </div>

                    <button type="submit" class="btn btn-primary">Spara Ändringar</button>
                </ChildContent>
            </EditForm>

        </Authorized>
    </AuthorizeView>
}
        </div>
    </div>
</div>

@code {

    UserDto dbUser;

    protected override async Task OnInitializedAsync()
    {

        try
        {  
            var azureUser = await GraphServiceClient.Me.Request().GetAsync();

            dbUser = await HttpClient.GetFromJsonAsync<UserDto>(HttpClient.BaseAddress + ("api/user/" + azureUser.Id));

            if(dbUser.UserId == null)
            {
                await HttpClient.PostAsJsonAsync<CreateUserModel>(HttpClient.BaseAddress + ("api/user"), new CreateUserModel 
                { UserId = azureUser.Id, 
                    FirstName = "", 
                    LastName = "", 
                    Email = azureUser.UserPrincipalName, 
                    Address = new AddressModel{City = "", Street = "", PostNumber = ""}, 
                    PhoneNumber = "",
                    //Ändra till false när vi är klara, gör bara så att om vi i teamet loggar in blir vi admins så vi kan testa produkten.
                    IsAdmin = true
                });
            }

            SharedClass.activeUser = dbUser;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private EditForm editForm;

    private async Task HandleFormSubmit()
    {
        if (editForm.EditContext.Validate())
        {
            await UpdateUser();
        }
    }

    private async Task UpdateUser()
    {
        try
        {
            var updateUserModel = new UpdateUserModel
            {
                UserId = dbUser.UserId,
                FirstName = dbUser.FirstName,
                LastName = dbUser.LastName,
                Email = dbUser.Email,
                PhoneNumber = dbUser.PhoneNumber,
                Address = new AddressModel
                {
                    City = dbUser.Address.City,
                    Street = dbUser.Address.Street,
                    PostNumber = dbUser.Address.PostNumber,
                }

            };

            await HttpClient.PutAsJsonAsync<UpdateUserModel>("api/user", updateUserModel);
            Console.WriteLine("Successfully updated user");
            Navigation.NavigateTo("/profile");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error updating user: " + ex.Message);
        }
    }

    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    private void AdminNavigation()
    {
        Navigation.NavigateTo("/admin");
    }

    
}
