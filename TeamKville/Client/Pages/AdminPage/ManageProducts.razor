@using Azure.Storage.Blobs;
@using TeamKville.Shared;
@using TeamKville.Shared.Dto;
@using TeamKville.Shared.Models;
@using Microsoft.AspNetCore.Components.Forms;
@using Syncfusion.Blazor.Inputs;
@inject IToastService ToastService

<h3 class="pt-3 pb-2">Lägg till produkt</h3>
<hr />
@if(categories != null && genres != null)
{
	<div class="container align-items-center">
		<EditForm Model="newProduct" OnSubmit="CreateProduct" class="width-fix">

				<div class="mb-3">
					<label for="name" class="form-label">Namn</label>
					<InputText class="form-control" id="name" @bind-Value="newProduct.Name" />
				</div>


				<div class="mb-3">
					<label for="description" class="form-label">Beskrivning</label>
					<InputTextArea type="text" class="form-control" id="description" @bind-Value="newProduct.Description" />
				</div>

				<div class="mb-3">
					<label for="category" class="form-label">Kategori <em>(Lämna genre och ålder blankt om du valt något annat än spel)</em></label>
					<InputSelect class="form-control" @bind-Value="newProduct.CategoryId" id="category">
						<option value=""></option>
						@if (categories != null)
						{
							@foreach (var category in categories)
							{
								<option value="@category.CategoryId">@category.Name</option>
							}
						}

					</InputSelect>
				</div>

				<div class="mb-3">
					<label for="genre" class="form-label">Genre 
					<button type="button" class="btn-link border border-0" style="background: none;" @onclick="(() => {newGenre = true;})"><em>Skapa ny genre</em></button>
					</label>
					@if(newGenre == false)
					{
						<InputSelect class="form-control" @bind-Value="newProduct.GenreId" id="genre">
							<option value=""></option>
							@if (genres != null)
							{
								@foreach (var genre in genres)
								{
									<option value="@genre.GenreId">@genre.Name</option>
								}
							}

						</InputSelect>
					}
					else if(newGenre == true)
					{
						<InputText type="text" class="form-control" placeholder="Skriv in nya genrenamnet här..." id="genre" @bind-Value="newGenreName"/>
					}
					
				</div>

				<div class="mb-3">
					<label for="age" class="form-label">Ålder</label>
					<SfSlider Min="3" Max="18" @bind-Value="newProduct.Age" Type="SliderType.Default" ID="age">
						<SliderTooltip IsVisible="true"></SliderTooltip>
						<SliderLimits Enabled="true" MinStart="3" MinEnd="18" MaxEnd="18" MaxStart="3"></SliderLimits>
					</SfSlider>
					<p>@newProduct.Age</p>
				</div>
			
				<div class="mb-3">
					<label for="price" class="form-label">Pris</label>
				<InputNumber class="form-control"  @bind-Value="newProduct.Price" />
				</div>

				<div class="mb-3">
					<label for="image" class="form-label">Bild</label>
					<InputFile  type="file" class="form-control" id="image" OnChange="@LoadFile" />
				</div>

				<button class="btn btn-secondary">Skapa</button>

		</EditForm>
	</div>

}

<h3 class="pt-3 pb-2">Ändra Produktstatus</h3>
<hr />
<table class="overflow-auto table">

	<tr class="border-bottom-2">
		<th>Produkt</th>
		<th>Aktiv</th>
	</tr>

	@foreach(var product in SharedClass.allProducts)
	{
		<tr>
			<th>@product.Name</th>
			<InputCheckbox @bind-Value="@product.IsActive" @oninput="((e) => UpdateProductStatus(e, product.Id))"/>
		</tr>
	}

</table>

@code {

	CreateProductModel newProduct = new CreateProductModel { IsActive = true };

	IEnumerable<CategoryDto> categories;
	IEnumerable<GenreDto> genres;
	bool newGenre = false;
	string? newGenreName = null;
	Stream? image;

	protected override async Task OnInitializedAsync()
	{
		categories = await HttpClient.GetFromJsonAsync<IEnumerable<CategoryDto>>(HttpClient.BaseAddress + "Category/all");
		genres = await HttpClient.GetFromJsonAsync<IEnumerable<GenreDto>>(HttpClient.BaseAddress + "api/genre");
	}

	private async void CreateProduct()
	{
		if(newGenreName != null)
		{
			await CreateGenre();
		}

		if(newProduct.CategoryId != 1 )
		{
			newProduct.GenreId = 4;
		}

		var result = await HttpClient.PostAsJsonAsync<CreateProductModel>(HttpClient.BaseAddress + "api/product", newProduct);

		if(result.StatusCode == System.Net.HttpStatusCode.OK)
		{
			BlobContainerClient blobContainerClient = new BlobContainerClient(SharedClass.connectionStringBlob, "product");
			await blobContainerClient.UploadBlobAsync($"{newProduct.Name}.png", image);
			ToastService.ShowSuccess("Produkt tillagd i sortimentet.");
		}
		else
		{
			ToastService.ShowError("Något gick fel, försök igen.");
		}

	}

	private async Task CreateGenre()
	{
		if(genres.Select(e => e.Name).Contains(newGenreName))
		{
			return;
		}

		await HttpClient.PostAsJsonAsync<string>(HttpClient.BaseAddress + "api/genre?genre=" + newGenreName, newGenreName);
		genres = await HttpClient.GetFromJsonAsync<IEnumerable<GenreDto>>(HttpClient.BaseAddress + "api/genre");
		newProduct.GenreId = genres.Where(g => g.Name == newGenreName).First().GenreId;
	}

	private async Task LoadFile(InputFileChangeEventArgs e)
	{
		image = e.File.OpenReadStream(16777215);
	}

	private async void UpdateProductStatus(Microsoft.AspNetCore.Components.ChangeEventArgs e, int productId)
	{
		var product = SharedClass.allProducts.Where(p => p.Id == productId).First();

		await HttpClient.PutAsJsonAsync<UpdateProductModel>(HttpClient.BaseAddress + "api/product", new UpdateProductModel
		{
			Id = product.Id,
			Name = product.Name,
			Description = product.Description,
			Age = product.Age,
			Price = product.Price,
			IsActive = (bool)e.Value
		});
	}
}
