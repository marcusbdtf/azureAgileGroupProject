
@if (Messages != null)
{

	<div class="container">
		<h3>Inkorg</h3>
		<div class="accordion" id="MessageAccordion">

			@foreach (var message in Messages)
			{

				<div class="accordion-item">
					<h2 class="accordion-header" id="heading_@message.Id">
						<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@message.Id" aria-expanded="true" aria-controls="collapse_@message.Id" @onclick="() => IsReadMethod(message)">

							<p class="mx-4 test">@message.Email</p>
							<p class="mx-4 test">@message.TimeSent</p>
							
							@if (message.IsRead)
							{
								<div>
									<i class="fa-solid fa-envelope-open"></i>
								</div>
							}
							else
							{
								<div >
									<i class="fa-solid fa-envelope"></i>
								</div>
							}



							<button @onclick="() => DeleteMessage(message.Id)" class="btn mx-4"> <i class="fa-solid fa-trash"></i> Ta bort</button>


						</button>
					</h2>
					<div id="collapse_@message.Id" class="accordion-collapse collapse" aria-labelledby="#heading_@message.Id" data-bs-parent="#MessageAccordion">
						<div class="accordion-body">
							<h5 class="m-4">@message.Header</h5>
							<p class="mx-4">@message.Body</p>
							<p class="mx-4"><strong>@message.SenderName</strong></p>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}

@code {

	List<EmailDto> Messages = new();


	protected override async Task OnInitializedAsync()
		{
		Messages = await HttpClient.GetFromJsonAsync<List<EmailDto>>(HttpClient.BaseAddress + "api/email");
		}

	private async Task IsReadMethod(EmailDto message)
	{
		if (!message.IsRead)
		{
		 var test = await HttpClient.PatchAsJsonAsync<EmailDto>(HttpClient.BaseAddress + "api/email", message);
			message.IsRead = true;
			Console.WriteLine("IS READ?" + message.IsRead);
		}

	}

	private async Task DeleteMessage(int id)
	{
		var result = await HttpClient.DeleteAsync(HttpClient.BaseAddress + $"api/email?id={id}");
		Console.WriteLine("Inuti Delete");

		var toremove = Messages.FirstOrDefault(m => m.Id.Equals(id));

		if (toremove != null)
			Messages.Remove(toremove);
	}


}

<style>
	.test {
		width: 200px;
	}
</style>